<%
# Cycling through nodes is done with a local variable named "n"
# The host used for a node is fqdn, always
# 
# A word about host_groups and check_mk tags
# Nagios, originally presented the host_groups to ease on editing.
# Check_MK has a similar feature called tags.
# Machines don't need these so we're using fqdn for most configurations
# like checks and check_parameters.

# main.mk is a python file, these special words don't need string presentation
SPECIAL_WORDS = ["None", "True", "False"]

extend Check_MK::Discovery

def prepare_print(arg)
  # Wrap string as python code strings, avoid numbers and or special words
  arg = Integer(arg) if Integer(arg) rescue arg
  SPECIAL_WORDS.include?(arg) || arg.is_a?(Integer) ? arg : "\"#{arg}\""
end

def build_args(args)
  # args are expected to be a Hash
  args.sort_by { |k, _| k }.
    map { |_, e| prepare_print(e) }.join(', ')
end

def build_array_args(args)
  # args are expected to be an Array
  args.map { |e| prepare_print(e) }.join(', ')
end

def mk_config(n, conf)
  n['check_mk'] and n['check_mk']['config'] and n['check_mk']['config'][conf]
end

@extra_host_conf = {}
def add_extra_host_conf(conf, params)
  @extra_host_conf[conf] ||= Array.new
  @extra_host_conf[conf].push(params)
end

@extra_service_conf = {}
def add_extra_service_conf(conf, params)
  @extra_service_conf[conf] ||= Array.new
  @extra_service_conf[conf].push(params)
end

@clustered_services = {}
def add_clustered_service(clustered_service, n)
  @clustered_services[clustered_service] ||= Array.new
  @clustered_services[clustered_service].push(n['fqdn'])
end

@nodes.select{ |n| mk_config(n, 'extra_service_conf') }.each do |n|
  mk_config(n, 'extra_service_conf').each do |check, conf|
    conf.each do |k, v|
      add_extra_service_conf(k, :service => check, :fqdn => n['fqdn'], :value => v)
    end
  end
end

@nodes.select{ |n| mk_config(n, 'extra_host_conf') }.each do |n|
  mk_config(n, 'extra_host_conf').each do |k, v|
    add_extra_host_conf(k, :fqdn => n['fqdn'], :value => v)
  end
end

@nodes.select{ |n| mk_config(n, 'clustered_services') }.each do |n|
  mk_config(n, 'clustered_services').each do |clustered_service|
    add_clustered_service(clustered_service, n)
  end
end
-%>

# This file is managed by chef

all_hosts += [
<% @nodes.each do |n| -%>
  "<%=n['fqdn']%>|<%=n['roles'].join('|')%>",
<% end -%>
]

ipaddresses = {
<% @nodes.select do |n| -%>
  "<%=n['fqdn']%>" : "<%=(n.respond_to?(:role?) ? relative_ipv4(n, @server) : (n['ipv4'] or n['fqdn']) ) %>",
<% end -%>
}

checks += [
<% @nodes.select { |n| mk_config(n, 'checks') }.each do |n| -%>
<%  n['check_mk']['config']['checks'].each do |check, check_args| -%>
<%    check_args.each do |name, args| -%>
  ( "<%=n['fqdn']%>", "<%=check%>", <%=prepare_print(name)%>, ( <%=build_args(args)%> ) ),
<%    end -%>
<%  end -%>
<% end -%>
]

check_parameters += [
<% @nodes.select { |n| mk_config(n, 'check_parameters') }.each do |n| -%>
<%  n['check_mk']['config']['check_parameters'].each do |check, parameters| -%>
  ( <%=parameters%>, [ "<%=n['fqdn']%>" ], [ "<%=check%>" ] ),
<%  end -%>
<% end -%>
]

legacy_checks += [
<% @nodes.select { |n| mk_config(n, 'legacy_checks') }.each do |n| -%>
<%  n['check_mk']['config']['legacy_checks'].each do |check, args| -%>
  ( ( "chef-check-mk-custom!<%=args['command']%>", "<%=check%>", <%=(args['performance'] or "False")%> ), [ "<%=n['fqdn']%>" ] ),
<%    # Adding optional to extra service conf
      args["extra_service_conf"] and args["extra_service_conf"].each do |c, v|
        add_extra_service_conf(c, :service => check, :fqdn => n['fqdn'], :value => v)
      end -%>
<%  end -%>
<% end -%>
]

<% @extra_service_conf.each do |k, host_values| -%>
extra_service_conf["<%=k%>"] = [
<%  host_values.each do |conf_values| -%>
  ( "<%=conf_values[:value]%>", [ "<%=conf_values[:fqdn]%>" ], [ "<%=conf_values[:service]%>" ] ),
<%  end -%>
]
<% end -%>

<% @extra_host_conf.each do |k, host_values| -%>
extra_host_conf["<%=k%>"] = [
<%  host_values.each do |conf_values| -%>
  ( "<%=conf_values[:value]%>", [ "<%=conf_values[:fqdn]%>" ] ),
<%  end -%>
]
<% end -%>

clusters = {}
<% @nodes.select{|e| mk_config(e, 'clusters') and mk_config(e, 'clusters').any? }.
  map { |e| mk_config(e, 'clusters') }.
    flatten.uniq.each do |cluster| -%>
clusters["<%=cluster%>"] = [ <%=build_array_args(
  @nodes.select { |e| mk_config(e, 'clusters') and mk_config(e, 'clusters').
    member?(cluster) }.map { |e| e['fqdn'] })%> ]
<% end -%>

clustered_services = [
<% @clustered_services.each do |clustered_service, nodes| -%>
  ( [ <%=build_array_args(nodes)%> ], [ "<%=clustered_service%>" ]),
<% end -%>
]
